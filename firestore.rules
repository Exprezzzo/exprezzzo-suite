rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isSignedIn() { return request.auth != null; }
    function isOwner(userId) { return request.auth.uid == userId; }
    function hasRole(role) { return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == role; }
    function isAdmin() { return hasRole('admin'); }
    function isModerator() { return hasRole('moderator') || isAdmin(); }

    // User profiles
    match /users/{userId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.keys().hasAll(['uid', 'email', 'role', 'createdAt']) && request.resource.data.role == 'user';
      allow update: if isSignedIn() && (isOwner(userId) || isAdmin()) && (!request.resource.data.diff(resource.data).affectedKeys().hasAny(['role']) || isAdmin());
      allow delete: if isAdmin();
    }

    // Sign designs collection
    match /signs/{signId} {
      allow read: if true;
      allow create: if isSignedIn() && request.resource.data.creatorId == request.auth.uid && request.resource.data.keys().hasAll(['welcomeText', 'toText', 'mainText', 'theme', 'createdAt']);
      allow update: if isSignedIn() && (resource.data.creatorId == request.auth.uid || isModerator());
      allow delete: if isSignedIn() && (resource.data.creatorId == request.auth.uid || isAdmin());
    }

    // Private user designs
    match /users/{userId}/private_signs/{signId} {
      allow read, write: if isSignedIn() && isOwner(userId);
    }

    // Analytics (write-only for users, read for admins)
    match /analytics/{document=**} {
      allow read: if isAdmin();
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    // Cost tracking
    match /cost_tracking/{document=**} {
      allow read: if isAdmin();
      allow write: if false;
    }
  }
}
